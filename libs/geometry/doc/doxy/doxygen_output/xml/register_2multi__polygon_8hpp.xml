<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="register_2multi__polygon_8hpp" kind="file" language="C++">
    <compoundname>multi_polygon.hpp</compoundname>
    <includes refid="tag_8hpp" local="no">boost/geometry/core/tag.hpp</includes>
    <includes refid="core_2tags_8hpp" local="no">boost/geometry/core/tags.hpp</includes>
    <incdepgraph>
      <node id="84551">
        <label>boost/geometry/core/tag.hpp</label>
        <link refid="tag_8hpp"/>
        <childnode refid="84552" relation="include">
        </childnode>
        <childnode refid="84553" relation="include">
        </childnode>
      </node>
      <node id="84550">
        <label>/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/geometries/register/multi_polygon.hpp</label>
        <link refid="register_2multi__polygon_8hpp"/>
        <childnode refid="84551" relation="include">
        </childnode>
        <childnode refid="84552" relation="include">
        </childnode>
      </node>
      <node id="84554">
        <label>cstddef</label>
      </node>
      <node id="84552">
        <label>boost/geometry/core/tags.hpp</label>
        <link refid="core_2tags_8hpp"/>
      </node>
      <node id="84553">
        <label>boost/geometry/util/type_traits_std.hpp</label>
        <link refid="type__traits__std_8hpp"/>
        <childnode refid="84554" relation="include">
        </childnode>
        <childnode refid="84555" relation="include">
        </childnode>
      </node>
      <node id="84555">
        <label>type_traits</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__register_1gac464d3e7b8f908820b9e8fc2a3e7ec1a" prot="public" static="no">
        <name>BOOST_GEOMETRY_REGISTER_MULTI_POLYGON</name>
        <param><defname>MultiPolygon</defname></param>
        <initializer>namespace boost { namespace geometry { namespace traits {  \
    template&lt;&gt; struct tag&lt;MultiPolygon&gt; { typedef multi_polygon_tag type; }; \
}}}</initializer>
        <briefdescription>
<para>Macro to register a multi_polygon. </para>        </briefdescription>
        <detaileddescription>
<para>The macro BOOST_GEOMETRY_REGISTER_MULTI_POLYGON registers a multi_polygon such that it is recognized by Boost.Geometry and that Boost.Geometry functionality can used with the specified type. The multi_polygon may contain template parameters, which must be specified then. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>MultiPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>multi_polygon type to be registered</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk>
[heading Example]
[register_multi_polygon]
[register_multi_polygon_output]
</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/geometries/register/multi_polygon.hpp" line="34" column="9" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/geometries/register/multi_polygon.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__register_1gad9d2c263a4b8d43db7d2894041cbd6a0" prot="public" static="no">
        <name>BOOST_GEOMETRY_REGISTER_MULTI_POLYGON_TEMPLATED</name>
        <param><defname>MultiPolygon</defname></param>
        <initializer>namespace boost { namespace geometry { namespace traits {  \
    template&lt;typename Polygon&gt; struct tag&lt; MultiPolygon&lt;Polygon&gt; &gt; { typedef multi_polygon_tag type; }; \
}}}</initializer>
        <briefdescription>
<para>Macro to register a templated multi_polygon. </para>        </briefdescription>
        <detaileddescription>
<para>The macro BOOST_GEOMETRY_REGISTER_MULTI_POLYGON_TEMPLATED registers a templated multi_polygon such that it is recognized by Boost.Geometry and that Boost.Geometry functionality can used with the specified type. The type must have one template parameter, which should be a polygon type, and should not be specified. Boost.Geometry takes care of inserting the template parameter. Hence all types of this templated multi_polygon are registered, regardless of their point type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>MultiPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>multi_polygon (without template parameters) type to be registered</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk>
[heading Example]
[register_multi_polygon_templated]
[register_multi_polygon_templated_output]
</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/geometries/register/multi_polygon.hpp" line="53" column="9" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/geometries/register/multi_polygon.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/geometries/register/multi_polygon.hpp"/>
  </compounddef>
</doxygen>
