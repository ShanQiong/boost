<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classboost_1_1geometry_1_1concepts_1_1_point" kind="class" language="C++" prot="public">
    <compoundname>boost::geometry::concepts::Point</compoundname>
    <includes local="no">point_concept.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Geometry</type>
      </param>
    </templateparamlist>
    <briefdescription>
<para><ref refid="classboost_1_1geometry_1_1concepts_1_1_point" kindref="compound">Point</ref> concept. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Formal definition:</title><para>The point concept is defined as following:<itemizedlist>
<listitem><para>there must be a specialization of <ref refid="structboost_1_1geometry_1_1traits_1_1tag" kindref="compound">traits::tag</ref> defining <ref refid="structboost_1_1geometry_1_1point__tag" kindref="compound">point_tag</ref> as type</para></listitem><listitem><para>there must be a specialization of <ref refid="structboost_1_1geometry_1_1traits_1_1coordinate__type" kindref="compound">traits::coordinate_type</ref> defining the type of its coordinates</para></listitem><listitem><para>there must be a specialization of <ref refid="structboost_1_1geometry_1_1traits_1_1coordinate__system" kindref="compound">traits::coordinate_system</ref> defining its coordinate system (cartesian, spherical, etc)</para></listitem><listitem><para>there must be a specialization of <ref refid="structboost_1_1geometry_1_1traits_1_1dimension" kindref="compound">traits::dimension</ref> defining its number of dimensions (2, 3, ...) (derive it conveniently from std::integral_constant&lt;std::size_t, X&gt; for X-D)</para></listitem><listitem><para>there must be a specialization of <ref refid="structboost_1_1geometry_1_1traits_1_1access" kindref="compound">traits::access</ref>, per dimension, with two functions:<itemizedlist>
<listitem><para><bold>get</bold> to get a coordinate value</para></listitem><listitem><para><bold>set</bold> to set a coordinate value (this one is not checked for <ref refid="classboost_1_1geometry_1_1concepts_1_1_const_point" kindref="compound">ConstPoint</ref>)</para></listitem></itemizedlist>
</para></listitem><listitem><para>for non-Cartesian coordinate systems, the coordinate system&apos;s units must either be <ref refid="structboost_1_1geometry_1_1degree" kindref="compound">boost::geometry::degree</ref> or <ref refid="structboost_1_1geometry_1_1radian" kindref="compound">boost::geometry::radian</ref></para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example:</title><para></para></simplesect>
A legacy point, defining the necessary specializations to fulfil to the concept.</para><para>Suppose that the following point is defined:  <programlisting><codeline><highlight class="normal">struct<sp/>legacy_point1</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>x,<sp/>y;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>It can then be adapted to the concept as following:  <programlisting><codeline><highlight class="normal">//<sp/>adapt<sp/>legacy_point1</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>boost<sp/>{<sp/>namespace<sp/>geometry<sp/>{<sp/>namespace<sp/>traits</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;&gt;<sp/>struct<sp/>tag&lt;legacy_point1&gt;<sp/>{<sp/>typedef<sp/>point_tag<sp/>type;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;&gt;<sp/>struct<sp/>coordinate_type&lt;legacy_point1&gt;<sp/>{<sp/>typedef<sp/>double<sp/>type;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;&gt;<sp/>struct<sp/>coordinate_system&lt;legacy_point1&gt;<sp/>{<sp/>typedef<sp/>cs::cartesian<sp/>type;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;&gt;<sp/>struct<sp/>dimension&lt;legacy_point1&gt;:<sp/>boost::mpl::int_&lt;2&gt;<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;&gt;<sp/>struct<sp/>access&lt;legacy_point1,<sp/>0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>double<sp/>get(legacy_point1<sp/>const&amp;<sp/>p)<sp/>{<sp/>return<sp/>p.x;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>set(legacy_point1&amp;<sp/>p,<sp/>double<sp/>const&amp;<sp/>value)<sp/>{<sp/>p.x<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;&gt;<sp/>struct<sp/>access&lt;legacy_point1,<sp/>1&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>double<sp/>get(legacy_point1<sp/>const&amp;<sp/>p)<sp/>{<sp/>return<sp/>p.y;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>set(legacy_point1&amp;<sp/>p,<sp/>double<sp/>const&amp;<sp/>value)<sp/>{<sp/>p.y<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}}}<sp/>//<sp/>namespace<sp/>boost::geometry::traits</highlight></codeline>
</programlisting></para><para>Note that it is done like above to show the system. Users will normally use the registration macro.</para><para><simplesect kind="par"><title>Example:</title><para></para></simplesect>
A read-only legacy point, using a macro to fulfil to the <ref refid="classboost_1_1geometry_1_1concepts_1_1_const_point" kindref="compound">ConstPoint</ref> concept. It cannot be modified by the library but can be used in all algorithms where points are not modified.</para><para>The point looks like the following:</para><para> <programlisting><codeline><highlight class="normal">class<sp/>legacy_point2</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">public<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>x()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>y()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>It uses the macro as following:  <programlisting><codeline><highlight class="normal">//<sp/>adapt<sp/>legacy_point2</highlight></codeline>
<codeline><highlight class="normal">BOOST_GEOMETRY_REGISTER_POINT_2D_CONST(legacy_point2,<sp/>double,<sp/>boost::geometry::cs::cartesian,<sp/>x(),<sp/>y()<sp/>)</highlight></codeline>
<codeline><highlight class="normal">//<sp/>end<sp/>adaptation</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/geometries/concepts/point_concept.hpp" line="97" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/geometries/concepts/point_concept.hpp" bodystart="96" bodyend="136"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
