<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceboost_1_1geometry_1_1tuples" kind="namespace" language="C++">
    <compoundname>boost::geometry::tuples</compoundname>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1element" prot="public">boost::geometry::tuples::element</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1element_3_01_i_00_01boost_1_1tuples_1_1cons_3_01_h_t_00_01_t_t_01_4_01_4" prot="public">boost::geometry::tuples::element&lt; I, boost::tuples::cons&lt; HT, TT &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1element_3_01_i_00_01boost_1_1tuples_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">boost::geometry::tuples::element&lt; I, boost::tuples::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1element_3_01_i_00_01std_1_1pair_3_01_h_t_00_01_t_t_01_4_01_4" prot="public">boost::geometry::tuples::element&lt; I, std::pair&lt; HT, TT &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1element_3_01_i_00_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">boost::geometry::tuples::element&lt; I, std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1exists__if" prot="public">boost::geometry::tuples::exists_if</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1find__if" prot="public">boost::geometry::tuples::find_if</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1find__if_3_01_tuple_00_01_unary_pred_00_01_n_00_01_n_01_4" prot="public">boost::geometry::tuples::find_if&lt; Tuple, UnaryPred, N, N &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1find__index__if" prot="public">boost::geometry::tuples::find_index_if</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1find__index__if_3_01_tuple_00_01_unary_pred_00_01_n_00_01_n_01_4" prot="public">boost::geometry::tuples::find_index_if&lt; Tuple, UnaryPred, N, N &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1is__found" prot="public">boost::geometry::tuples::is_found</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1is__not__found" prot="public">boost::geometry::tuples::is_not_found</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1is__tuple" prot="public">boost::geometry::tuples::is_tuple</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1is__tuple_3_01boost_1_1tuples_1_1cons_3_01_h_t_00_01_t_t_01_4_01_4" prot="public">boost::geometry::tuples::is_tuple&lt; boost::tuples::cons&lt; HT, TT &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1is__tuple_3_01boost_1_1tuples_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">boost::geometry::tuples::is_tuple&lt; boost::tuples::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1is__tuple_3_01std_1_1pair_3_01_f_00_01_s_01_4_01_4" prot="public">boost::geometry::tuples::is_tuple&lt; std::pair&lt; F, S &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1is__tuple_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">boost::geometry::tuples::is_tuple&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1push__back" prot="public">boost::geometry::tuples::push_back</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1push__back_3_01std_1_1pair_3_01_f_00_01_s_01_4_00_01_t_01_4" prot="public">boost::geometry::tuples::push_back&lt; std::pair&lt; F, S &gt;, T &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1push__back_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_00_01_t_01_4" prot="public">boost::geometry::tuples::push_back&lt; std::tuple&lt; Ts... &gt;, T &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1push__back__bt" prot="public">boost::geometry::tuples::push_back_bt</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1push__back__bt_3_01_tuple_00_01_t_00_01_n_00_01_n_01_4" prot="public">boost::geometry::tuples::push_back_bt&lt; Tuple, T, N, N &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1push__back__st" prot="public">boost::geometry::tuples::push_back_st</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1push__back__st_3_01std_1_1index__sequence_3_01_is_8_8_8_01_59e8d2f45d6e4661879632c53c544ed0" prot="public">boost::geometry::tuples::push_back_st&lt; std::index_sequence&lt; Is... &gt;, std::tuple&lt; Ts... &gt;, T &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1size" prot="public">boost::geometry::tuples::size</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1size_3_01boost_1_1tuples_1_1cons_3_01_h_t_00_01_t_t_01_4_01_4" prot="public">boost::geometry::tuples::size&lt; boost::tuples::cons&lt; HT, TT &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1size_3_01boost_1_1tuples_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">boost::geometry::tuples::size&lt; boost::tuples::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1size_3_01std_1_1pair_3_01_h_t_00_01_t_t_01_4_01_4" prot="public">boost::geometry::tuples::size&lt; std::pair&lt; HT, TT &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1tuples_1_1size_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">boost::geometry::tuples::size&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innernamespace refid="namespaceboost_1_1geometry_1_1tuples_1_1detail">boost::geometry::tuples::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1tuples_1ab3a7523d98186d20986a21c1ff2c8d93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::tuple_element&lt; I, std::tuple&lt; Ts... &gt; &gt;::type &amp;</type>
        <definition>constexpr std::tuple_element&lt;I, std::tuple&lt;Ts...&gt; &gt;::type&amp; boost::geometry::tuples::get</definition>
        <argsstring>(std::tuple&lt; Ts... &gt; &amp;t)</argsstring>
        <name>get</name>
        <param>
          <type>std::tuple&lt; Ts... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" line="119" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1tuples_1aa54fe9e3358f3817e40b2c95cf267017" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::tuple_element&lt; I, std::tuple&lt; Ts... &gt; &gt;::type const  &amp;</type>
        <definition>constexpr std::tuple_element&lt;I, std::tuple&lt;Ts...&gt; &gt;::type const&amp; boost::geometry::tuples::get</definition>
        <argsstring>(std::tuple&lt; Ts... &gt; const &amp;t)</argsstring>
        <name>get</name>
        <param>
          <type>std::tuple&lt; Ts... &gt; const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" line="126" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1tuples_1ad3238970af7f86837594e4018e8fa828" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename HT</type>
          </param>
          <param>
            <type>typename TT</type>
          </param>
        </templateparamlist>
        <type>constexpr std::tuple_element&lt; I, std::pair&lt; HT, TT &gt; &gt;::type &amp;</type>
        <definition>constexpr std::tuple_element&lt;I, std::pair&lt;HT, TT&gt; &gt;::type&amp; boost::geometry::tuples::get</definition>
        <argsstring>(std::pair&lt; HT, TT &gt; &amp;t)</argsstring>
        <name>get</name>
        <param>
          <type>std::pair&lt; HT, TT &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" line="133" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1tuples_1a1d4918c03afccc3e0030082b90f3d619" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename HT</type>
          </param>
          <param>
            <type>typename TT</type>
          </param>
        </templateparamlist>
        <type>constexpr std::tuple_element&lt; I, std::pair&lt; HT, TT &gt; &gt;::type const  &amp;</type>
        <definition>constexpr std::tuple_element&lt;I, std::pair&lt;HT, TT&gt; &gt;::type const&amp; boost::geometry::tuples::get</definition>
        <argsstring>(std::pair&lt; HT, TT &gt; const &amp;t)</argsstring>
        <name>get</name>
        <param>
          <type>std::pair&lt; HT, TT &gt; const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" line="140" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1tuples_1a37dc54eaeb9c3d35e184048c06ac990e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>boost::tuples::access_traits&lt; typename boost::tuples::element&lt; I, boost::tuples::tuple&lt; Ts... &gt; &gt;::type &gt;::non_const_type</type>
        <definition>boost::tuples::access_traits&lt; typename boost::tuples::element&lt;I, boost::tuples::tuple&lt;Ts...&gt; &gt;::type &gt;::non_const_type boost::geometry::tuples::get</definition>
        <argsstring>(boost::tuples::tuple&lt; Ts... &gt; &amp;t)</argsstring>
        <name>get</name>
        <param>
          <type>boost::tuples::tuple&lt; Ts... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" line="150" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1tuples_1a0aa55bc6e2e6e3afdc1f6940b1979395" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>boost::tuples::access_traits&lt; typename boost::tuples::element&lt; I, boost::tuples::tuple&lt; Ts... &gt; &gt;::type &gt;::const_type</type>
        <definition>boost::tuples::access_traits&lt; typename boost::tuples::element&lt;I, boost::tuples::tuple&lt;Ts...&gt; &gt;::type &gt;::const_type boost::geometry::tuples::get</definition>
        <argsstring>(boost::tuples::tuple&lt; Ts... &gt; const &amp;t)</argsstring>
        <name>get</name>
        <param>
          <type>boost::tuples::tuple&lt; Ts... &gt; const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" line="160" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1tuples_1a5ca1866838273a21969add5711ffe624" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename HT</type>
          </param>
          <param>
            <type>typename TT</type>
          </param>
        </templateparamlist>
        <type>boost::tuples::access_traits&lt; typename boost::tuples::element&lt; I, boost::tuples::cons&lt; HT, TT &gt; &gt;::type &gt;::non_const_type</type>
        <definition>boost::tuples::access_traits&lt; typename boost::tuples::element&lt;I, boost::tuples::cons&lt;HT, TT&gt; &gt;::type &gt;::non_const_type boost::geometry::tuples::get</definition>
        <argsstring>(boost::tuples::cons&lt; HT, TT &gt; &amp;tup)</argsstring>
        <name>get</name>
        <param>
          <type>boost::tuples::cons&lt; HT, TT &gt; &amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" line="171" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1tuples_1af043ded458a570c10b67b2f84df4cf88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename HT</type>
          </param>
          <param>
            <type>typename TT</type>
          </param>
        </templateparamlist>
        <type>boost::tuples::access_traits&lt; typename boost::tuples::element&lt; I, boost::tuples::cons&lt; HT, TT &gt; &gt;::type &gt;::const_type</type>
        <definition>boost::tuples::access_traits&lt; typename boost::tuples::element&lt;I, boost::tuples::cons&lt;HT, TT&gt; &gt;::type &gt;::const_type boost::geometry::tuples::get</definition>
        <argsstring>(boost::tuples::cons&lt; HT, TT &gt; const &amp;tup)</argsstring>
        <name>get</name>
        <param>
          <type>boost::tuples::cons&lt; HT, TT &gt; const &amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" line="181" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" bodystart="181" bodyend="184"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/tuples.hpp" line="25" column="1"/>
  </compounddef>
</doxygen>
