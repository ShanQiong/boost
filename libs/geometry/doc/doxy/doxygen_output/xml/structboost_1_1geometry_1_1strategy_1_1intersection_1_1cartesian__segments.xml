<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments" kind="struct" language="C++" prot="public">
    <compoundname>boost::geometry::strategy::intersection::cartesian_segments</compoundname>
    <includes local="no">intersection.hpp</includes>
    <innerclass refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1_1segment__intersection__info" prot="public">boost::geometry::strategy::intersection::cartesian_segments::segment_intersection_info</innerclass>
    <templateparamlist>
      <param>
        <type>typename CalculationType</type>
        <defval>void</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1ad87dd2e530ec309df94bde8e46c90ca9" prot="public" static="no">
        <type><ref refid="structboost_1_1geometry_1_1cartesian__tag" kindref="compound">cartesian_tag</ref></type>
        <definition>typedef cartesian_tag boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::cs_tag</definition>
        <argsstring></argsstring>
        <name>cs_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="135" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1aa33d6b10f8641b005984957b6a8fb3d3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename UniqueSubRange1</type>
          </param>
          <param>
            <type>typename UniqueSubRange2</type>
          </param>
          <param>
            <type>typename Policy</type>
          </param>
        </templateparamlist>
        <type>Policy::return_type</type>
        <definition>static Policy::return_type boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::apply</definition>
        <argsstring>(UniqueSubRange1 const &amp;range_p, UniqueSubRange2 const &amp;range_q, Policy const &amp;policy)</argsstring>
        <name>apply</name>
        <param>
          <type>UniqueSubRange1 const &amp;</type>
          <declname>range_p</declname>
        </param>
        <param>
          <type>UniqueSubRange2 const &amp;</type>
          <declname>range_q</declname>
        </param>
        <param>
          <type>Policy const &amp;</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="300" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="300" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a2526716d7cc4b72afeb59ac059193095" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename UniqueSubRange1</type>
          </param>
          <param>
            <type>typename UniqueSubRange2</type>
          </param>
          <param>
            <type>typename Policy</type>
          </param>
          <param>
            <type>typename ModelledUniqueSubRange1</type>
          </param>
          <param>
            <type>typename ModelledUniqueSubRange2</type>
          </param>
        </templateparamlist>
        <type>Policy::return_type</type>
        <definition>static Policy::return_type boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::apply</definition>
        <argsstring>(UniqueSubRange1 const &amp;range_p, UniqueSubRange2 const &amp;range_q, Policy const &amp;policy, ModelledUniqueSubRange1 const &amp;modelled_range_p, ModelledUniqueSubRange2 const &amp;modelled_range_q)</argsstring>
        <name>apply</name>
        <param>
          <type>UniqueSubRange1 const &amp;</type>
          <declname>range_p</declname>
        </param>
        <param>
          <type>UniqueSubRange2 const &amp;</type>
          <declname>range_q</declname>
        </param>
        <param>
          <type>Policy const &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>ModelledUniqueSubRange1 const &amp;</type>
          <declname>modelled_range_p</declname>
        </param>
        <param>
          <type>ModelledUniqueSubRange2 const &amp;</type>
          <declname>modelled_range_q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="319" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="319" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1aad1ea627093056793eeec137d5839ced" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename W</type>
          </param>
          <param>
            <type>typename ResultType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::cramers_rule</definition>
        <argsstring>(D const &amp;dx_a, D const &amp;dy_a, D const &amp;dx_b, D const &amp;dy_b, W const &amp;wx, W const &amp;wy, ResultType &amp;nominator, ResultType &amp;denominator)</argsstring>
        <name>cramers_rule</name>
        <param>
          <type>D const &amp;</type>
          <declname>dx_a</declname>
        </param>
        <param>
          <type>D const &amp;</type>
          <declname>dy_a</declname>
        </param>
        <param>
          <type>D const &amp;</type>
          <declname>dx_b</declname>
        </param>
        <param>
          <type>D const &amp;</type>
          <declname>dy_b</declname>
        </param>
        <param>
          <type>W const &amp;</type>
          <declname>wx</declname>
        </param>
        <param>
          <type>W const &amp;</type>
          <declname>wy</declname>
        </param>
        <param>
          <type>ResultType &amp;</type>
          <declname>nominator</declname>
        </param>
        <param>
          <type>ResultType &amp;</type>
          <declname>denominator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="279" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="279" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a8a881cd2ff3cd55af0031fa852d6de0b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>Dimension</declname>
            <defname>Dimension</defname>
          </param>
          <param>
            <type>typename PointP</type>
          </param>
          <param>
            <type>typename PointQ</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::disjoint_by_range</definition>
        <argsstring>(PointP const &amp;p1, PointP const &amp;p2, PointQ const &amp;q1, PointQ const &amp;q2)</argsstring>
        <name>disjoint_by_range</name>
        <param>
          <type>PointP const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>PointP const &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>PointQ const &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>PointQ const &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if two segments do not overlap. If not, then no further calculations need to be done. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="370" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="370" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a4d29fc7979bfb39d4126aa77cb21a0ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RatioType</type>
          </param>
          <param>
            <type>typename SegmentInfo</type>
          </param>
          <param>
            <type>typename Segment1</type>
          </param>
          <param>
            <type>typename Segment2</type>
          </param>
          <param>
            <type>typename Policy</type>
          </param>
          <param>
            <type>typename UniqueSubRange1</type>
          </param>
          <param>
            <type>typename UniqueSubRange2</type>
          </param>
        </templateparamlist>
        <type>Policy::return_type</type>
        <definition>static Policy::return_type boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::unified</definition>
        <argsstring>(SegmentInfo &amp;sinfo, Segment1 const &amp;p, Segment2 const &amp;q, Policy const &amp;, UniqueSubRange1 const &amp;range_p, UniqueSubRange2 const &amp;range_q)</argsstring>
        <name>unified</name>
        <param>
          <type>SegmentInfo &amp;</type>
          <declname>sinfo</declname>
        </param>
        <param>
          <type>Segment1 const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Segment2 const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>Policy const &amp;</type>
        </param>
        <param>
          <type>UniqueSubRange1 const &amp;</type>
          <declname>range_p</declname>
        </param>
        <param>
          <type>UniqueSubRange2 const &amp;</type>
          <declname>range_q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="405" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="405" bodyend="539"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a95c850705b83376fbe57102352b78f70" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point1</type>
          </param>
          <param>
            <type>typename Point2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::equals_point_point</definition>
        <argsstring>(Point1 const &amp;point1, Point2 const &amp;point2)</argsstring>
        <name>equals_point_point</name>
        <param>
          <type>Point1 const &amp;</type>
          <declname>point1</declname>
        </param>
        <param>
          <type>Point2 const &amp;</type>
          <declname>point2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="763" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="763" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a6338875a98170a3d228f2810631bfd47" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; bool, bool &gt;</type>
        <definition>static std::pair&lt;bool, bool&gt; boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::is_x_more_significant</definition>
        <argsstring>(CoordinateType const &amp;abs_dx_a, CoordinateType const &amp;abs_dy_a, CoordinateType const &amp;abs_dx_b, CoordinateType const &amp;abs_dy_b, bool const a_is_point, bool const b_is_point)</argsstring>
        <name>is_x_more_significant</name>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>abs_dx_a</declname>
        </param>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>abs_dy_a</declname>
        </param>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>abs_dx_b</declname>
        </param>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>abs_dy_b</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>a_is_point</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>b_is_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="546" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="546" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a929298e56d30efaf1c2f7472ed56bdfd" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ProjCoord1</type>
          </param>
          <param>
            <type>typename ProjCoord2</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>static int boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::position_value</definition>
        <argsstring>(ProjCoord1 const &amp;ca1, ProjCoord2 const &amp;cb1, ProjCoord2 const &amp;cb2)</argsstring>
        <name>position_value</name>
        <param>
          <type>ProjCoord1 const &amp;</type>
          <declname>ca1</declname>
        </param>
        <param>
          <type>ProjCoord2 const &amp;</type>
          <declname>cb1</declname>
        </param>
        <param>
          <type>ProjCoord2 const &amp;</type>
          <declname>cb2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="745" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="745" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1aea958c3b5466eb4477598f65be7c1300" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>Dimension</declname>
            <defname>Dimension</defname>
          </param>
          <param>
            <type>typename Policy</type>
          </param>
          <param>
            <type>typename RatioType</type>
          </param>
          <param>
            <type>typename Segment1</type>
          </param>
          <param>
            <type>typename Segment2</type>
          </param>
          <param>
            <type>typename RobustPoint1</type>
          </param>
          <param>
            <type>typename RobustPoint2</type>
          </param>
        </templateparamlist>
        <type>Policy::return_type</type>
        <definition>static Policy::return_type boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::relate_collinear</definition>
        <argsstring>(Segment1 const &amp;a, Segment2 const &amp;b, RobustPoint1 const &amp;robust_a1, RobustPoint1 const &amp;robust_a2, RobustPoint2 const &amp;robust_b1, RobustPoint2 const &amp;robust_b2, bool a_is_point, bool b_is_point)</argsstring>
        <name>relate_collinear</name>
        <param>
          <type>Segment1 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Segment2 const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>RobustPoint1 const &amp;</type>
          <declname>robust_a1</declname>
        </param>
        <param>
          <type>RobustPoint1 const &amp;</type>
          <declname>robust_a2</declname>
        </param>
        <param>
          <type>RobustPoint2 const &amp;</type>
          <declname>robust_b1</declname>
        </param>
        <param>
          <type>RobustPoint2 const &amp;</type>
          <declname>robust_b2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>a_is_point</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b_is_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="587" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="587" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1acf327d3560c0db40a16c2ce96014639a" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
          </param>
          <param>
            <type>typename RatioType</type>
          </param>
          <param>
            <type>typename Segment1</type>
          </param>
          <param>
            <type>typename Segment2</type>
          </param>
          <param>
            <type>typename Type1</type>
          </param>
          <param>
            <type>typename Type2</type>
          </param>
        </templateparamlist>
        <type>Policy::return_type</type>
        <definition>static Policy::return_type boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::relate_collinear</definition>
        <argsstring>(Segment1 const &amp;a, Segment2 const &amp;b, Type1 oa_1, Type1 oa_2, Type2 ob_1, Type2 ob_2)</argsstring>
        <name>relate_collinear</name>
        <param>
          <type>Segment1 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Segment2 const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Type1</type>
          <declname>oa_1</declname>
        </param>
        <param>
          <type>Type1</type>
          <declname>oa_2</declname>
        </param>
        <param>
          <type>Type2</type>
          <declname>ob_1</declname>
        </param>
        <param>
          <type>Type2</type>
          <declname>ob_2</declname>
        </param>
        <briefdescription>
<para>Relate segments known collinear. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="625" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="625" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a893b8d79046a2494337785b020980cc2" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
          </param>
          <param>
            <type>typename RatioType</type>
          </param>
          <param>
            <type>typename DegenerateSegment</type>
          </param>
          <param>
            <type>typename Type1</type>
          </param>
          <param>
            <type>typename Type2</type>
          </param>
        </templateparamlist>
        <type>Policy::return_type</type>
        <definition>static Policy::return_type boost::geometry::strategy::intersection::cartesian_segments&lt; CalculationType &gt;::relate_one_degenerate</definition>
        <argsstring>(DegenerateSegment const &amp;degenerate_segment, Type1 d, Type2 s1, Type2 s2, bool a_degenerate)</argsstring>
        <name>relate_one_degenerate</name>
        <param>
          <type>DegenerateSegment const &amp;</type>
          <declname>degenerate_segment</declname>
        </param>
        <param>
          <type>Type1</type>
          <declname>d</declname>
        </param>
        <param>
          <type>Type2</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>Type2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>a_degenerate</declname>
        </param>
        <briefdescription>
<para>Relate segments where one is degenerate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="726" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="726" bodyend="742"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ulink url="http://mathworld.wolfram.com/Line-LineIntersection.html">http://mathworld.wolfram.com/Line-LineIntersection.html</ulink> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" line="134" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategies/cartesian/intersection.hpp" bodystart="133" bodyend="767"/>
    <listofallmembers>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1aa33d6b10f8641b005984957b6a8fb3d3" prot="public" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>apply</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a2526716d7cc4b72afeb59ac059193095" prot="public" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>apply</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1aad1ea627093056793eeec137d5839ced" prot="public" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>cramers_rule</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1ad87dd2e530ec309df94bde8e46c90ca9" prot="public" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>cs_tag</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a8a881cd2ff3cd55af0031fa852d6de0b" prot="public" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>disjoint_by_range</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a95c850705b83376fbe57102352b78f70" prot="private" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>equals_point_point</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a6338875a98170a3d228f2810631bfd47" prot="private" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>is_x_more_significant</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a929298e56d30efaf1c2f7472ed56bdfd" prot="private" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>position_value</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1aea958c3b5466eb4477598f65be7c1300" prot="private" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>relate_collinear</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1acf327d3560c0db40a16c2ce96014639a" prot="private" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>relate_collinear</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a893b8d79046a2494337785b020980cc2" prot="private" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>relate_one_degenerate</name></member>
      <member refid="structboost_1_1geometry_1_1strategy_1_1intersection_1_1cartesian__segments_1a4d29fc7979bfb39d4126aa77cb21a0ea" prot="public" virt="non-virtual"><scope>boost::geometry::strategy::intersection::cartesian_segments</scope><name>unified</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
