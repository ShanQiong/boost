<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structboost_1_1geometry_1_1strategy_1_1side_1_1side__non__robust" kind="struct" language="C++" prot="public">
    <compoundname>boost::geometry::strategy::side::side_non_robust</compoundname>
    <includes local="no">side_non_robust.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename CalculationType</type>
        <defval>void</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structboost_1_1geometry_1_1strategy_1_1side_1_1side__non__robust_1a06d2a4e568561441a7686b917fdfedc5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P1</type>
          </param>
          <param>
            <type>typename P2</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>static int boost::geometry::strategy::side::side_non_robust&lt; CalculationType &gt;::apply</definition>
        <argsstring>(P1 const &amp;p1, P2 const &amp;p2, P const &amp;p)</argsstring>
        <name>apply</name>
        <param>
          <type>P1 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>P2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Computes double the signed area of the CCW triangle p1, p2, p. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategy/cartesian/side_non_robust.hpp" line="46" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategy/cartesian/side_non_robust.hpp" bodystart="46" bodyend="91"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Predicate to check at which side of a segment a point lies: left of segment (&gt;0), right of segment (&lt; 0), on segment (0). </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CalculationType</parametername>
</parameternamelist>
<parameterdescription>
<para>numeric type for calculation (e.g. high precision); if [*void] then it is extracted automatically from the coordinate type and (if necessary) promoted to floating point</para></parameterdescription>
</parameteritem>
</parameterlist>
This predicate determines at which side of a segment a point lies </para>    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategy/cartesian/side_non_robust.hpp" line="37" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategy/cartesian/side_non_robust.hpp" bodystart="36" bodyend="93"/>
    <listofallmembers>
      <member refid="structboost_1_1geometry_1_1strategy_1_1side_1_1side__non__robust_1a06d2a4e568561441a7686b917fdfedc5" prot="public" virt="non-virtual"><scope>boost::geometry::strategy::side::side_non_robust</scope><name>apply</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
