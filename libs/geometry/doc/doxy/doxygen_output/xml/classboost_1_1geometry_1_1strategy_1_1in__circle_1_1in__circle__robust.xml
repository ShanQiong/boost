<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classboost_1_1geometry_1_1strategy_1_1in__circle_1_1in__circle__robust" kind="class" language="C++" prot="public">
    <compoundname>boost::geometry::strategy::in_circle::in_circle_robust</compoundname>
    <includes local="no">in_circle_robust.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename CalculationType</type>
        <defval>double</defval>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>Robustness</declname>
        <defname>Robustness</defname>
        <defval>2</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classboost_1_1geometry_1_1strategy_1_1in__circle_1_1in__circle__robust_1a1778c69db9e2c63fd2c3ddf1c8f87b29" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P1</type>
          </param>
          <param>
            <type>typename P2</type>
          </param>
          <param>
            <type>typename P3</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>static int boost::geometry::strategy::in_circle::in_circle_robust&lt; CalculationType, Robustness &gt;::apply</definition>
        <argsstring>(P1 const &amp;p1, P2 const &amp;p2, P3 const &amp;p3, P const &amp;p)</argsstring>
        <name>apply</name>
        <param>
          <type>P1 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>P2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>P3 const &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategy/cartesian/in_circle_robust.hpp" line="36" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategy/cartesian/in_circle_robust.hpp" bodystart="36" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Adaptive precision predicate to check whether a fourth point lies inside the circumcircle of the first three points: inside (&gt;0), outside (&lt; 0), on the boundary (0). </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CalculationType</parametername>
</parameternamelist>
<parameterdescription>
<para>numeric type for calculation (e.g. high precision); if [*void] then it is extracted automatically from the coordinate type and (if necessary) promoted to floating point (numeric_limits&lt;ct&gt;::epsilon() and numeric_limits&lt;ct&gt;::digits must be supported for calculation type ct) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Robustness</parametername>
</parameternamelist>
<parameterdescription>
<para>std::size_t value from 0 (fastest) to 2 (default, most precise).</para></parameterdescription>
</parameteritem>
</parameterlist>
This predicate determines whether a fourth point lies inside the circumcircle of the first three points using an algorithm that is adapted from incircle as described in &quot;Adaptive Precision Floating-Point Arithmetic and Fast Robust Geometric Predicates&quot; by Jonathan Richard Shewchuk ( <ulink url="https://dl.acm.org/citation.cfm?doid=237218.237337">https://dl.acm.org/citation.cfm?doid=237218.237337</ulink> ). More information and copies of the paper can also be found at <ulink url="https://www.cs.cmu.edu/~quake/robust.html">https://www.cs.cmu.edu/~quake/robust.html</ulink> . It is designed to be adaptive in the sense that it should be fast for inputs that lead to correct results with plain float operations but robust for inputs that require higher precision arithmetics. </para>    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategy/cartesian/in_circle_robust.hpp" line="33" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/strategy/cartesian/in_circle_robust.hpp" bodystart="32" bodyend="56"/>
    <listofallmembers>
      <member refid="classboost_1_1geometry_1_1strategy_1_1in__circle_1_1in__circle__robust_1a1778c69db9e2c63fd2c3ddf1c8f87b29" prot="public" virt="non-virtual"><scope>boost::geometry::strategy::in_circle::in_circle_robust</scope><name>apply</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
