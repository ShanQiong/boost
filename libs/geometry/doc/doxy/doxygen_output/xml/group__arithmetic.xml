<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__arithmetic" kind="group">
    <compoundname>arithmetic</compoundname>
    <title>arithmetic: arithmetic operations on points</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__arithmetic_1ga4be53645868644bb6c5a455450d4d00e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point1</type>
          </param>
          <param>
            <type>typename Point2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::add_point</definition>
        <argsstring>(Point1 &amp;p1, Point2 const &amp;p2)</argsstring>
        <name>add_point</name>
        <param>
          <type>Point1 &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Point2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Adds a point to another. </para>        </briefdescription>
        <detaileddescription>
<para>The coordinates of the second point will be added to those of the first point. The second point is not modified. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point1</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point2</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second point </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" line="83" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" bodystart="83" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1ga9c6f97e8be0aea5a989b10282cfdfcd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::add_value</definition>
        <argsstring>(Point &amp;p, typename detail::param&lt; Point &gt;::type value)</argsstring>
        <name>add_value</name>
        <param>
          <type>Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>typename detail::param&lt; Point &gt;::type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Adds the same value to each coordinate of a point. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" line="62" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" bodystart="62" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1gaa595e4f32e834533b6299e08449afc6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point1</type>
          </param>
          <param>
            <type>typename Point2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::assign_point</definition>
        <argsstring>(Point1 &amp;p1, Point2 const &amp;p2)</argsstring>
        <name>assign_point</name>
        <param>
          <type>Point1 &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Point2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Assign a point with another. </para>        </briefdescription>
        <detaileddescription>
<para>The coordinates of the first point will be assigned those of the second point. The second point is not modified. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point1</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point2</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second point </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" line="252" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" bodystart="252" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1gaa6e3bfda2aa04de193ee936a93663c7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::assign_value</definition>
        <argsstring>(Point &amp;p, typename detail::param&lt; Point &gt;::type value)</argsstring>
        <name>assign_value</name>
        <param>
          <type>Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>typename detail::param&lt; Point &gt;::type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Assign each coordinate of a point the same value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to assign </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" line="231" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" bodystart="231" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1gac128df32524c621f3a6e4601b8cf3c59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ResultP</type>
          </param>
          <param>
            <type>typename P1</type>
          </param>
          <param>
            <type>typename P2</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; dimension&lt; ResultP &gt;::value !=3||! traits::make&lt; ResultP &gt;::is_specialized, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ResultP</type>
        <definition>ResultP boost::geometry::cross_product</definition>
        <argsstring>(P1 const &amp;p1, P2 const &amp;p2)</argsstring>
        <name>cross_product</name>
        <param>
          <type>P1 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>P2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Computes the cross product of two vectors. </para>        </briefdescription>
        <detaileddescription>
<para>All vectors should have the same dimension, 3 or 2.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cross product vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/cross_product.hpp" line="119" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/cross_product.hpp" bodystart="119" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1ga776b2b1d94a81faa9a46809a742f969f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; dimension&lt; P &gt;::value !=3||! traits::make&lt; P &gt;::is_specialized, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>P</type>
        <definition>P boost::geometry::cross_product</definition>
        <argsstring>(P const &amp;p1, P const &amp;p2)</argsstring>
        <name>cross_product</name>
        <param>
          <type>P const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>P const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Computes the cross product of two vectors. </para>        </briefdescription>
        <detaileddescription>
<para>All vectors should have the same dimension, 3 or 2.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cross product vector</para></simplesect>
 <qbk>[heading Examples]</qbk>   <qbk>[cross_product] [cross_product_output]</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/cross_product.hpp" line="174" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/cross_product.hpp" bodystart="174" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1ga8141e616132d8d614da3428863336dc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point1</type>
          </param>
          <param>
            <type>typename Point2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::divide_point</definition>
        <argsstring>(Point1 &amp;p1, Point2 const &amp;p2)</argsstring>
        <name>divide_point</name>
        <param>
          <type>Point1 &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Point2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Divides a point by another. </para>        </briefdescription>
        <detaileddescription>
<para>The coordinates of the first point will be divided by those of the second point. The second point is not modified. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point1</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point2</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second point </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" line="210" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" bodystart="210" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1ga98645f15cfba3e9e9e9e83c72e0f98e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::divide_value</definition>
        <argsstring>(Point &amp;p, typename detail::param&lt; Point &gt;::type value)</argsstring>
        <name>divide_value</name>
        <param>
          <type>Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>typename detail::param&lt; Point &gt;::type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Divides each coordinate of the same point by a value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to divide by </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" line="189" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" bodystart="189" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1ga9f8598c97c42728b0511e1a0a502585b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point1</type>
          </param>
          <param>
            <type>typename Point2</type>
          </param>
        </templateparamlist>
        <type>constexpr select_coordinate_type&lt; Point1, Point2 &gt;::type</type>
        <definition>constexpr select_coordinate_type&lt;Point1, Point2&gt;::type boost::geometry::dot_product</definition>
        <argsstring>(Point1 const &amp;p1, Point2 const &amp;p2)</argsstring>
        <name>dot_product</name>
        <param>
          <type>Point1 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Point2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Computes the dot product (or scalar product) of 2 vectors (points). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point1</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point2</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second point </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the dot product</para></simplesect>
 <qbk>[heading Examples]</qbk>   <qbk>[dot_product] [dot_product_output]</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/dot_product.hpp" line="81" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/dot_product.hpp" bodystart="81" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1ga3ce5cfd812427c46ac5a319a34fe33b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point1</type>
          </param>
          <param>
            <type>typename Point2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::multiply_point</definition>
        <argsstring>(Point1 &amp;p1, Point2 const &amp;p2)</argsstring>
        <name>multiply_point</name>
        <param>
          <type>Point1 &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Point2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Multiplies a point by another. </para>        </briefdescription>
        <detaileddescription>
<para>The coordinates of the first point will be multiplied by those of the second point. The second point is not modified. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point1</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point2</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second point </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is <emphasis>not</emphasis> a dot, cross or wedge product. It is a mere field-by-field multiplication. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" line="168" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" bodystart="168" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1gaee0fa23a64414a4781e08965653c0b81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::multiply_value</definition>
        <argsstring>(Point &amp;p, typename detail::param&lt; Point &gt;::type value)</argsstring>
        <name>multiply_value</name>
        <param>
          <type>Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>typename detail::param&lt; Point &gt;::type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Multiplies each coordinate of a point by the same value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to multiply by </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" line="146" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1ga2aaca98906e1978d00ea55b40a1a39ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point1</type>
          </param>
          <param>
            <type>typename Point2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::subtract_point</definition>
        <argsstring>(Point1 &amp;p1, Point2 const &amp;p2)</argsstring>
        <name>subtract_point</name>
        <param>
          <type>Point1 &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Point2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Subtracts a point to another. </para>        </briefdescription>
        <detaileddescription>
<para>The coordinates of the second point will be subtracted to those of the first point. The second point is not modified. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point1</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point2</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second point </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" line="125" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" bodystart="125" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group__arithmetic_1gaf0ffb395ff5f6359d8da055decddd385" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::subtract_value</definition>
        <argsstring>(Point &amp;p, typename detail::param&lt; Point &gt;::type value)</argsstring>
        <name>subtract_value</name>
        <param>
          <type>Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>typename detail::param&lt; Point &gt;::type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Subtracts the same value to each coordinate of a point. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Point Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to subtract </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" line="104" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/arithmetic/arithmetic.hpp" bodystart="104" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
