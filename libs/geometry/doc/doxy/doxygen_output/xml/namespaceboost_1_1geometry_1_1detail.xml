<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceboost_1_1geometry_1_1detail" kind="namespace" language="C++">
    <compoundname>boost::geometry::detail</compoundname>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1boost__any__cast__policy" prot="public">boost::geometry::detail::boost_any_cast_policy</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1boost__variant__types" prot="public">boost::geometry::detail::boost_variant_types</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1boost__variant__types_3_01util_1_1type__sequence_3_01boost_4730f8481cda0fc789ada6f62df5f2cc" prot="public">boost::geometry::detail::boost_variant_types&lt; util::type_sequence&lt; boost::detail::variant::void_, Ts... &gt;, util::type_sequence&lt; Rs... &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1boost__variant__types_3_01util_1_1type__sequence_3_01_t_00_3d9eddfad10f38921530c902d0767485" prot="public">boost::geometry::detail::boost_variant_types&lt; util::type_sequence&lt; T, Ts... &gt;, util::type_sequence&lt; Rs... &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1boost__variant__types_3_01util_1_1type__sequence_3_4_00_01u3eefc43efe7d8f8b38f15127bb527abc" prot="public">boost::geometry::detail::boost_variant_types&lt; util::type_sequence&lt;&gt;, util::type_sequence&lt; Rs... &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1calculate__point__order__by__area" prot="public">boost::geometry::detail::calculate_point_order_by_area</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1calculate__point__order__by__azimuth" prot="public">boost::geometry::detail::calculate_point_order_by_azimuth</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1clean__point" prot="public">boost::geometry::detail::clean_point</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1coordinate__cast_3_01rational_3_01_t_01_4_01_4" prot="public">boost::geometry::detail::coordinate_cast&lt; rational&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1is__coordinates__number__eq" prot="public">boost::geometry::detail::is_coordinates_number_eq</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1is__coordinates__number__leq" prot="public">boost::geometry::detail::is_coordinates_number_leq</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1promoted__to__floating__point" prot="public">boost::geometry::detail::promoted_to_floating_point</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1promoted__to__floating__point_3_01boost_1_1multiprecision_1_1number_3_01_backend_01_4_01_4" prot="public">boost::geometry::detail::promoted_to_floating_point&lt; boost::multiprecision::number&lt; Backend &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1promoted__to__floating__point_3_01boost_1_1multiprecision_11fa5f27c9d1573f6bc34ae9a03b23399" prot="public">boost::geometry::detail::promoted_to_floating_point&lt; boost::multiprecision::number&lt; boost::multiprecision::cpp_bin_float&lt; Digits &gt; &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1promoted__to__floating__point_3_01boost_1_1rational_3_01_t_01_4_01_4" prot="public">boost::geometry::detail::promoted_to_floating_point&lt; boost::rational&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1static__assert__check" prot="public">boost::geometry::detail::static_assert_check</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1std__any__cast__policy" prot="public">boost::geometry::detail::std_any_cast_policy</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1unique__types" prot="public">boost::geometry::detail::unique_types</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1detail_1_1variant__or__single" prot="public">boost::geometry::detail::variant_or_single</innerclass>
    <innernamespace refid="namespaceboost_1_1geometry_1_1detail_1_1closest__points">boost::geometry::detail::closest_points</innernamespace>
    <innernamespace refid="namespaceboost_1_1geometry_1_1detail_1_1envelope">boost::geometry::detail::envelope</innernamespace>
    <innernamespace refid="namespaceboost_1_1geometry_1_1detail_1_1helper__geometries">boost::geometry::detail::helper_geometries</innernamespace>
    <innernamespace refid="namespaceboost_1_1geometry_1_1detail_1_1is__simple">boost::geometry::detail::is_simple</innernamespace>
    <innernamespace refid="namespaceboost_1_1geometry_1_1detail_1_1is__valid">boost::geometry::detail::is_valid</innernamespace>
    <innernamespace refid="namespaceboost_1_1geometry_1_1detail_1_1overlay">boost::geometry::detail::overlay</innernamespace>
    <innernamespace refid="namespaceboost_1_1geometry_1_1detail_1_1partition">boost::geometry::detail::partition</innernamespace>
    <innernamespace refid="namespaceboost_1_1geometry_1_1detail_1_1precise__math">boost::geometry::detail::precise_math</innernamespace>
    <innernamespace refid="namespaceboost_1_1geometry_1_1detail_1_1turns">boost::geometry::detail::turns</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1detail_1a2b57a149cfeb965f35038acb6621b025" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry</type>
          </param>
          <param>
            <type>typename UnaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::detail::all_ranges_of</definition>
        <argsstring>(Geometry const &amp;geometry, UnaryPredicate p)</argsstring>
        <name>all_ranges_of</name>
        <param>
          <type>Geometry const &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>UnaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/for_each_range.hpp" line="233" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/for_each_range.hpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1detail_1ac0e2a2637896c9db369e689cdf9f782d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry</type>
          </param>
          <param>
            <type>typename UnaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::detail::any_range_of</definition>
        <argsstring>(Geometry const &amp;geometry, UnaryPredicate p)</argsstring>
        <name>any_range_of</name>
        <param>
          <type>Geometry const &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>UnaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/for_each_range.hpp" line="242" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/for_each_range.hpp" bodystart="242" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1detail_1a755bf02d116e3700090372743a8bd28b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ring</type>
          </param>
          <param>
            <type>typename Strategy</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__enum_1ga0af1c124acb76f0892024d6d4ab2bc8c" kindref="member">geometry::order_selector</ref></type>
        <definition>geometry::order_selector boost::geometry::detail::calculate_point_order</definition>
        <argsstring>(Ring const &amp;ring, Strategy const &amp;strategy)</argsstring>
        <name>calculate_point_order</name>
        <param>
          <type>Ring const &amp;</type>
          <declname>ring</declname>
        </param>
        <param>
          <type>Strategy const &amp;</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/calculate_point_order.hpp" line="337" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/calculate_point_order.hpp" bodystart="337" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1detail_1ab33deacd6b2ebb92ff7a890edd9a4b04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ring</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__enum_1ga0af1c124acb76f0892024d6d4ab2bc8c" kindref="member">geometry::order_selector</ref></type>
        <definition>geometry::order_selector boost::geometry::detail::calculate_point_order</definition>
        <argsstring>(Ring const &amp;ring)</argsstring>
        <name>calculate_point_order</name>
        <param>
          <type>Ring const &amp;</type>
          <declname>ring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/calculate_point_order.hpp" line="345" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/calculate_point_order.hpp" bodystart="345" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1detail_1a03eb5d769d9be56d6a7796adcbf8c7f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry</type>
          </param>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>Functor</type>
        <definition>Functor boost::geometry::detail::for_each_range</definition>
        <argsstring>(Geometry const &amp;geometry, Functor f)</argsstring>
        <name>for_each_range</name>
        <param>
          <type>Geometry const &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>Functor</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/for_each_range.hpp" line="268" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/for_each_range.hpp" bodystart="268" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1detail_1a2d56d2cff14309e43cf843c9a9bd295a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry</type>
          </param>
          <param>
            <type>typename UnaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::detail::none_range_of</definition>
        <argsstring>(Geometry const &amp;geometry, UnaryPredicate p)</argsstring>
        <name>none_range_of</name>
        <param>
          <type>Geometry const &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>UnaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/for_each_range.hpp" line="255" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/algorithms/detail/for_each_range.hpp" bodystart="255" bodyend="262"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/core/coordinate_promotion.hpp" line="59" column="1"/>
  </compounddef>
</doxygen>
