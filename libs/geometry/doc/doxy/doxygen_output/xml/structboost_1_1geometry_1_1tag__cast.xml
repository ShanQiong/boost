<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structboost_1_1geometry_1_1tag__cast" kind="struct" language="C++" prot="public">
    <compoundname>boost::geometry::tag_cast</compoundname>
    <includes local="no">tag_cast.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Tag</type>
      </param>
      <param>
        <type>typename ...</type>
        <declname>BaseTags</declname>
        <defname>BaseTags</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structboost_1_1geometry_1_1tag__cast_1aed66f9b4f65945ffd4dea82a7f18b99c" prot="public" static="no">
        <type>Tag</type>
        <definition>typedef Tag boost::geometry::tag_cast&lt; Tag, BaseTags &gt;::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/core/tag_cast.hpp" line="44" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/core/tag_cast.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Metafunction defining a type being either the specified tag, or one of the specified basetags if the type inherits from them. </para>    </briefdescription>
    <detaileddescription>
<para>Tags can inherit each other. A multi_point inherits, for example, both the <ref refid="structboost_1_1geometry_1_1multi__tag" kindref="compound">multi_tag</ref> and the <ref refid="structboost_1_1geometry_1_1pointlike__tag" kindref="compound">pointlike_tag</ref>. Often behaviour can be shared between different geometry types. A tag, found by the metafunction tag, can be casted to a more basic tag, and then dispatched by that tag.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to be casted to one of the base tags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BaseTags</parametername>
</parameternamelist>
<parameterdescription>
<para>Base tags</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk>[include reference/core/tag_cast.qbk]</qbk>  </para>    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/core/tag_cast.hpp" line="43" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/core/tag_cast.hpp" bodystart="42" bodyend="45"/>
    <listofallmembers>
      <member refid="structboost_1_1geometry_1_1tag__cast_1aed66f9b4f65945ffd4dea82a7f18b99c" prot="public" virt="non-virtual"><scope>boost::geometry::tag_cast</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
