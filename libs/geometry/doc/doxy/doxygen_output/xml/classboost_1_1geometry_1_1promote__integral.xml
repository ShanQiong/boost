<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classboost_1_1geometry_1_1promote__integral" kind="class" language="C++" prot="public">
    <compoundname>boost::geometry::promote_integral</compoundname>
    <includes local="no">promote_integral.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>bool</type>
        <declname>PromoteUnsignedToUnsigned</declname>
        <defname>PromoteUnsignedToUnsigned</defname>
        <defval>false</defval>
      </param>
      <param>
        <type>bool</type>
        <declname>UseCheckedInteger</declname>
        <defname>UseCheckedInteger</defname>
        <defval>false</defval>
      </param>
      <param>
        <type>bool</type>
        <declname>IsIntegral</declname>
        <defname>IsIntegral</defname>
        <defval>std::is_integral&lt;T&gt;::value</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classboost_1_1geometry_1_1promote__integral_1a63a687d80e8c9f5b9167361edfdf38b7" prot="private" static="no">
        <type>detail::promote_integral::bit_size&lt; T &gt;</type>
        <definition>typedef detail::promote_integral::bit_size&lt;T&gt; boost::geometry::promote_integral&lt; T, PromoteUnsignedToUnsigned, UseCheckedInteger, IsIntegral &gt;::bit_size_type</definition>
        <argsstring></argsstring>
        <name>bit_size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" line="164" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classboost_1_1geometry_1_1promote__integral_1a6a4ab4b8749f0486b27d539ae092b018" prot="private" static="no">
        <type>std::conditional_t&lt;(is_unsigned &amp;&amp;PromoteUnsignedToUnsigned), unsigned_integral_types, signed_integral_types &gt;</type>
        <definition>typedef std::conditional_t&lt; (is_unsigned &amp;&amp; PromoteUnsignedToUnsigned), unsigned_integral_types, signed_integral_types &gt; boost::geometry::promote_integral&lt; T, PromoteUnsignedToUnsigned, UseCheckedInteger, IsIntegral &gt;::integral_types</definition>
        <argsstring></argsstring>
        <name>integral_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" line="274" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classboost_1_1geometry_1_1promote__integral_1a2a1bedda622e672fc6e751d0c7d83b40" prot="private" static="no">
        <type>std::conditional_t&lt;(PromoteUnsignedToUnsigned &amp;&amp;is_unsigned), std::integral_constant&lt; std::size_t,(2 *bit_size_type::value)&gt;, std::conditional_t&lt; is_unsigned, std::integral_constant&lt; std::size_t,(2 *bit_size_type::value+1)&gt;, std::integral_constant&lt; std::size_t,(2 *bit_size_type::value - 1)&gt; &gt; &gt;</type>
        <definition>typedef std::conditional_t&lt; (PromoteUnsignedToUnsigned &amp;&amp; is_unsigned), std::integral_constant&lt;std::size_t, (2 * bit_size_type::value)&gt;, std::conditional_t &lt; is_unsigned, std::integral_constant&lt;std::size_t, (2 * bit_size_type::value + 1)&gt;, std::integral_constant&lt;std::size_t, (2 * bit_size_type::value - 1)&gt; &gt; &gt; boost::geometry::promote_integral&lt; T, PromoteUnsignedToUnsigned, UseCheckedInteger, IsIntegral &gt;::min_bit_size_type</definition>
        <argsstring></argsstring>
        <name>min_bit_size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" line="223" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classboost_1_1geometry_1_1promote__integral_1aa2b669ea88e013701196ae3c79f1b0bb" prot="private" static="no">
        <type>detail::promote_integral::integral_types&lt; short, int, long, long long &gt;</type>
        <definition>typedef detail::promote_integral::integral_types&lt; short, int, long, long long &gt; boost::geometry::promote_integral&lt; T, PromoteUnsignedToUnsigned, UseCheckedInteger, IsIntegral &gt;::signed_integral_types</definition>
        <argsstring></argsstring>
        <name>signed_integral_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" line="243" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classboost_1_1geometry_1_1promote__integral_1a5383b7dfa70677f03799f26117a57f30" prot="private" static="no">
        <type>detail::promote_integral::integral_types&lt; unsigned short, unsigned int, unsigned long, std::size_t, unsigned long long &gt;</type>
        <definition>typedef detail::promote_integral::integral_types&lt; unsigned short, unsigned int, unsigned long, std::size_t, unsigned long long &gt; boost::geometry::promote_integral&lt; T, PromoteUnsignedToUnsigned, UseCheckedInteger, IsIntegral &gt;::unsigned_integral_types</definition>
        <argsstring></argsstring>
        <name>unsigned_integral_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" line="264" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" bodystart="264" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classboost_1_1geometry_1_1promote__integral_1a68c904b67524d1873c695191c26b24bf" prot="public" static="no">
        <type>detail::promote_integral::promote_to_larger&lt; T, min_bit_size_type::value, integral_types &gt;::<ref refid="classboost_1_1geometry_1_1promote__integral_1a68c904b67524d1873c695191c26b24bf" kindref="member">type</ref></type>
        <definition>typedef detail::promote_integral::promote_to_larger&lt; T, min_bit_size_type::value, integral_types &gt;::type boost::geometry::promote_integral&lt; T, PromoteUnsignedToUnsigned, UseCheckedInteger, IsIntegral &gt;::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" line="282" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classboost_1_1geometry_1_1promote__integral_1a3e3b4f828b75dd0b7368d2b47959a010" prot="private" static="yes" mutable="no">
        <type>bool const</type>
        <definition>bool const boost::geometry::promote_integral&lt; T, PromoteUnsignedToUnsigned, UseCheckedInteger, IsIntegral &gt;::is_unsigned</definition>
        <argsstring></argsstring>
        <name>is_unsigned</name>
        <initializer>= std::is_unsigned&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" line="162" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Meta-function to define an integral type with size than is (roughly) twice the bit size of T. </para>    </briefdescription>
    <detaileddescription>
<para>This meta-function tries to promote the fundamental integral type T to a another integral type with size (roughly) twice the bit size of T.</para><para>To do this, two times the bit size of T is tested against the bit sizes of: short, int, long, long long, boost::int128_t and the one that first matches is chosen.</para><para>For unsigned types the bit size of T is tested against the bit sizes of the types above, if T is promoted to a signed type, or the bit sizes of unsigned short, unsigned int, unsigned long, std::size_t, unsigned long long, boost::uint128_t if T is promoted to an unsigned type.</para><para>By default an unsigned type is promoted to a signed type. This behavior is controlled by the PromoteUnsignedToUnsigned boolean template parameter, whose default value is &quot;false&quot;. To promote an unsigned type to an unsigned type set the value of this template parameter to &quot;true&quot;.</para><para>If the macro BOOST_GEOMETRY_NO_MULTIPRECISION_INTEGER is not defined, boost&apos;s multiprecision integer cpp_int&lt;&gt; is used as a last resort.</para><para>If BOOST_GEOMETRY_NO_MULTIPRECISION_INTEGER is defined and an appropriate type cannot be detected, the input type is returned as is.</para><para>Finally, if the passed type is either a floating-point type or a user-defined type it is returned as is.</para><para><simplesect kind="note"><para>boost::int128_type and boost::uint128_type are considered only if the macros BOOST_HAS_INT128 and BOOST_GEOMETRY_ENABLE_INT128 are defined </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" line="160" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/promote_integral.hpp" bodystart="159" bodyend="283"/>
    <listofallmembers>
      <member refid="classboost_1_1geometry_1_1promote__integral_1a63a687d80e8c9f5b9167361edfdf38b7" prot="private" virt="non-virtual"><scope>boost::geometry::promote_integral</scope><name>bit_size_type</name></member>
      <member refid="classboost_1_1geometry_1_1promote__integral_1a6a4ab4b8749f0486b27d539ae092b018" prot="private" virt="non-virtual"><scope>boost::geometry::promote_integral</scope><name>integral_types</name></member>
      <member refid="classboost_1_1geometry_1_1promote__integral_1a3e3b4f828b75dd0b7368d2b47959a010" prot="private" virt="non-virtual"><scope>boost::geometry::promote_integral</scope><name>is_unsigned</name></member>
      <member refid="classboost_1_1geometry_1_1promote__integral_1a2a1bedda622e672fc6e751d0c7d83b40" prot="private" virt="non-virtual"><scope>boost::geometry::promote_integral</scope><name>min_bit_size_type</name></member>
      <member refid="classboost_1_1geometry_1_1promote__integral_1aa2b669ea88e013701196ae3c79f1b0bb" prot="private" virt="non-virtual"><scope>boost::geometry::promote_integral</scope><name>signed_integral_types</name></member>
      <member refid="classboost_1_1geometry_1_1promote__integral_1a68c904b67524d1873c695191c26b24bf" prot="public" virt="non-virtual"><scope>boost::geometry::promote_integral</scope><name>type</name></member>
      <member refid="classboost_1_1geometry_1_1promote__integral_1a5383b7dfa70677f03799f26117a57f30" prot="private" virt="non-virtual"><scope>boost::geometry::promote_integral</scope><name>unsigned_integral_types</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
