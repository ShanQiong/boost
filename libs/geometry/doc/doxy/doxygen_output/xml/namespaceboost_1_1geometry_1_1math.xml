<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceboost_1_1geometry_1_1math" kind="namespace" language="C++">
    <compoundname>boost::geometry::math</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a5195b9c2f433a755b96ea11b4b925542" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::abs</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>abs</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Short utility to workaround gcc/clang problem that abs is converting to integer and that older versions of MSVC does not support abs of long long... </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="793" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="793" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a424ff6fb28c45c2ef9efe69d37417122" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DegreeOrRadian</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::as_radian</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>as_radian</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="715" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="715" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a5918e366fa038f972973d8c2a11cdf5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::d2r</definition>
        <argsstring>()</argsstring>
        <name>d2r</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="654" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="654" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a4e739bc389b4498f97887e62042bbcec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::divide</definition>
        <argsstring>(T const &amp;n, T const &amp;d)</argsstring>
        <name>divide</name>
        <param>
          <type>T const &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="829" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="829" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a0ef8f8d4839a1eb21d496f6e2a2fe218" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::math::equals</definition>
        <argsstring>(T1 const &amp;a, T2 const &amp;b)</argsstring>
        <name>equals</name>
        <param>
          <type>T1 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>returns true if both arguments are equal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>first argument </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>second argument </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if a == b </para></simplesect>
<simplesect kind="note"><para>If both a and b are of an integral type, comparison is done by ==. If one of the types is floating point, comparison is done by abs and comparing with epsilon. If one of the types is non-fundamental, it might be a high-precision number and comparison is done using the == operator of that class. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="599" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="599" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1acb3d77c27ffcec5c25756532580b5214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::math::equals_with_epsilon</definition>
        <argsstring>(T1 const &amp;a, T2 const &amp;b)</argsstring>
        <name>equals_with_epsilon</name>
        <param>
          <type>T1 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="608" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="608" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1aa3a09408a776f89964386d65b5c3c5e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DegreeOrRadian</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::from_radian</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>from_radian</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="721" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="721" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a21699893f254f35ca1d07d74294ace93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::half_pi</definition>
        <argsstring>()</argsstring>
        <name>half_pi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="563" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="563" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a3e5b88abd56e4edb732c5f2ebd01671f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::hav</definition>
        <argsstring>(T const &amp;theta)</argsstring>
        <name>hav</name>
        <param>
          <type>T const &amp;</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>Calculates the haversine of an angle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>See <ulink url="http://en.wikipedia.org/wiki/Haversine_formula">http://en.wikipedia.org/wiki/Haversine_formula</ulink> haversin(alpha) = sin2(alpha/2) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="734" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="734" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a280554abf82cd9ea0bc54cf9a9bc5300" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NT</type>
          </param>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type>NT</type>
        <definition>NT boost::geometry::math::horner_evaluate</definition>
        <argsstring>(NT const &amp;x, IteratorType begin, IteratorType end)</argsstring>
        <name>horner_evaluate</name>
        <param>
          <type>NT const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Evaluate the polynomial in x using Horner&apos;s method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="900" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="900" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1aca9af218bee06cb26809523980003fa8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>bool</type>
            <declname>IsEquatorial</declname>
            <defname>IsEquatorial</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool boost::geometry::math::is_latitude_pole</definition>
        <argsstring>(T const &amp;lat)</argsstring>
        <name>is_latitude_pole</name>
        <param>
          <type>T const &amp;</type>
          <declname>lat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="165" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="165" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1adc078e08c2f54509bb1828c7f66dd4f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool boost::geometry::math::is_longitude_antimeridian</definition>
        <argsstring>(T const &amp;lon)</argsstring>
        <name>is_longitude_antimeridian</name>
        <param>
          <type>T const &amp;</type>
          <declname>lon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="182" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="182" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1ae8855788de4b521d3387bfbc115795f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::math::larger</definition>
        <argsstring>(T1 const &amp;a, T2 const &amp;b)</argsstring>
        <name>larger</name>
        <param>
          <type>T1 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="626" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="626" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1ae532ea90cdfbd4212e8978cf155dd7b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::math::larger_or_equals</definition>
        <argsstring>(T1 const &amp;a, T2 const &amp;b)</argsstring>
        <name>larger_or_equals</name>
        <param>
          <type>T1 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="644" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="644" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1ab7a2bb2f2550501c6fd9a0bb7da40840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>CoordinateType</type>
        <definition>CoordinateType boost::geometry::math::latitude_convert_ep</definition>
        <argsstring>(CoordinateType const &amp;lat)</argsstring>
        <name>latitude_convert_ep</name>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>lat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="152" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="152" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a5556428ebb3d3bfaf5151f9f196892ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>CoordinateType</type>
        <definition>CoordinateType boost::geometry::math::longitude_difference</definition>
        <argsstring>(CoordinateType const &amp;longitude1, CoordinateType const &amp;longitude2)</argsstring>
        <name>longitude_difference</name>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>longitude1</declname>
        </param>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>longitude2</declname>
        </param>
        <briefdescription>
<para>The abs difference between longitudes in range [0, 180]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Units</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the coordindate system in the spheroid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>longitude1</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>longitude2</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="479" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="479" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a9d91147d64ca68045bca9ff04d9ad1b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>CoordinateType</type>
        <definition>CoordinateType boost::geometry::math::longitude_distance_signed</definition>
        <argsstring>(CoordinateType const &amp;longitude1, CoordinateType const &amp;longitude2)</argsstring>
        <name>longitude_distance_signed</name>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>longitude1</declname>
        </param>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>longitude2</declname>
        </param>
        <briefdescription>
<para>Short utility to calculate difference between two longitudes normalized in range (-180, 180]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Units</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the coordindate system in the spheroid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>longitude1</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>longitude2</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="434" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="434" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1aec917cf38a9c90c00206e21ad23b5dfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>CoordinateType</type>
        <definition>CoordinateType boost::geometry::math::longitude_distance_unsigned</definition>
        <argsstring>(CoordinateType const &amp;longitude1, CoordinateType const &amp;longitude2)</argsstring>
        <name>longitude_distance_unsigned</name>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>longitude1</declname>
        </param>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>longitude2</declname>
        </param>
        <briefdescription>
<para>Short utility to calculate difference between two longitudes normalized in range [0, 360). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Units</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the coordindate system in the spheroid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>longitude1</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>longitude2</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="453" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="453" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a87d9c7262f7108ee771762f274b355e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>CoordinateType</type>
        <definition>CoordinateType boost::geometry::math::longitude_interval_distance_signed</definition>
        <argsstring>(CoordinateType const &amp;longitude_a1, CoordinateType const &amp;longitude_a2, CoordinateType const &amp;longitude_b)</argsstring>
        <name>longitude_interval_distance_signed</name>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>longitude_a1</declname>
        </param>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>longitude_a2</declname>
        </param>
        <param>
          <type>CoordinateType const &amp;</type>
          <declname>longitude_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="486" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="486" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a69f85567fc9e5a5cf6e1fd2069305130" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>detail::modulo&lt; T &gt;::return_type</type>
        <definition>detail::modulo&lt;T&gt;::return_type boost::geometry::math::mod</definition>
        <argsstring>(T const &amp;value1, T const &amp;value2)</argsstring>
        <name>mod</name>
        <param>
          <type>T const &amp;</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value2</declname>
        </param>
        <briefdescription>
<para>Short utility to return the modulo of two values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>First value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the modulo operation on the (ordered) pair (value1, value2) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="779" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="779" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1aa788f31d42c27f4ea0724d203c06a7d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::math::normalize_azimuth</definition>
        <argsstring>(CoordinateType &amp;angle)</argsstring>
        <name>normalize_azimuth</name>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Short utility to normalize the azimuth on a spheroid in the range (-180, 180]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Units</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the coordindate system in the spheroid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="401" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="401" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a72104dcaa7e56e1a859ce5216e58a132" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::math::normalize_longitude</definition>
        <argsstring>(CoordinateType &amp;longitude)</argsstring>
        <name>normalize_longitude</name>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude</declname>
        </param>
        <briefdescription>
<para>Short utility to normalize the longitude on a spheroid. Note that in general both coordinates should be normalized at once. This utility is suitable e.g. for normalization of the difference of longitudes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Units</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the coordindate system in the spheroid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>longitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="384" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="384" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a7c0eae011cc2ef53ea2dce1b3e86f375" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::math::normalize_spheroidal_box_coordinates</definition>
        <argsstring>(CoordinateType &amp;longitude1, CoordinateType &amp;latitude1, CoordinateType &amp;longitude2, CoordinateType &amp;latitude2)</argsstring>
        <name>normalize_spheroidal_box_coordinates</name>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude1</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>latitude1</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude2</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>latitude2</declname>
        </param>
        <briefdescription>
<para>Short utility to normalize the coordinates of a box on a spheroid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Units</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the coordindate system in the spheroid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>longitude1</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum longitude of the box </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latitude1</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum latitude of the box </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>longitude2</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum longitude of the box </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latitude2</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum latitude of the box </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_box_coordinates.hpp" line="124" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_box_coordinates.hpp" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a6d2247b8673dab924ec3260abd28b7c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>bool</type>
            <declname>IsEquatorial</declname>
            <defname>IsEquatorial</defname>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::math::normalize_spheroidal_box_coordinates</definition>
        <argsstring>(CoordinateType &amp;longitude1, CoordinateType &amp;latitude1, CoordinateType &amp;longitude2, CoordinateType &amp;latitude2)</argsstring>
        <name>normalize_spheroidal_box_coordinates</name>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude1</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>latitude1</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude2</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>latitude2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_box_coordinates.hpp" line="136" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_box_coordinates.hpp" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1aa75647c17f8c94299f95c965831c19d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::math::normalize_spheroidal_box_coordinates</definition>
        <argsstring>(CoordinateType &amp;longitude1, CoordinateType &amp;latitude1, CoordinateType &amp;longitude2, CoordinateType &amp;latitude2, bool band)</argsstring>
        <name>normalize_spheroidal_box_coordinates</name>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude1</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>latitude1</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude2</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>latitude2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>band</declname>
        </param>
        <briefdescription>
<para>Short utility to normalize the coordinates of a box on a spheroid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Units</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the coordindate system in the spheroid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>longitude1</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum longitude of the box </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latitude1</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum latitude of the box </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>longitude2</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum longitude of the box </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latitude2</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum latitude of the box </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>band</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the box should be treated as a band or not and avoid the computation done in the other version of the function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_box_coordinates.hpp" line="160" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_box_coordinates.hpp" bodystart="160" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a53345e30a5f319fd9639845b2e515ca9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>bool</type>
            <declname>IsEquatorial</declname>
            <defname>IsEquatorial</defname>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::math::normalize_spheroidal_box_coordinates</definition>
        <argsstring>(CoordinateType &amp;longitude1, CoordinateType &amp;latitude1, CoordinateType &amp;longitude2, CoordinateType &amp;latitude2, bool band)</argsstring>
        <name>normalize_spheroidal_box_coordinates</name>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude1</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>latitude1</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude2</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>latitude2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>band</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_box_coordinates.hpp" line="173" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_box_coordinates.hpp" bodystart="173" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a2ee4804e2c2559ba78a8f95bb81fc71e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::math::normalize_spheroidal_coordinates</definition>
        <argsstring>(CoordinateType &amp;longitude, CoordinateType &amp;latitude)</argsstring>
        <name>normalize_spheroidal_coordinates</name>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>latitude</declname>
        </param>
        <briefdescription>
<para>Short utility to normalize the coordinates on a spheroid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Units</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the coordindate system in the spheroid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CoordinateType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>longitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Latitude </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="355" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="355" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a3e68270e5dee95d9080a06f60bc6c3a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Units</type>
          </param>
          <param>
            <type>bool</type>
            <declname>IsEquatorial</declname>
            <defname>IsEquatorial</defname>
          </param>
          <param>
            <type>typename CoordinateType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::math::normalize_spheroidal_coordinates</definition>
        <argsstring>(CoordinateType &amp;longitude, CoordinateType &amp;latitude)</argsstring>
        <name>normalize_spheroidal_coordinates</name>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>longitude</declname>
        </param>
        <param>
          <type>CoordinateType &amp;</type>
          <declname>latitude</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="365" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="365" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a49c79a656b89f81fe0658f94080f517a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::math::normalize_unit_vector</definition>
        <argsstring>(ValueType &amp;x, ValueType &amp;y)</argsstring>
        <name>normalize_unit_vector</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Normalize the given values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the values </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Value y TODO: adl1995 - Merge this function with formulas/vertex_longitude.hpp </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" line="415" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/normalize_spheroidal_coordinates.hpp" bodystart="415" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a8e747ae1fe84655e4235f2f47c4aac99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::pi</definition>
        <argsstring>()</argsstring>
        <name>pi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="557" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="557" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a6b98f65524babc34af3339216a4acd0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
          <param>
            <type>typename CT</type>
          </param>
        </templateparamlist>
        <type>CT</type>
        <definition>CT boost::geometry::math::polyval</definition>
        <argsstring>(IteratorType first, IteratorType last, CT const &amp;eps)</argsstring>
        <name>polyval</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>CT const &amp;</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
<para>Evaluate the polynomial. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="918" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="918" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a70fb90dfb4d4b7367eec4deefe459c4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>T1</type>
        <definition>T1 boost::geometry::math::pow</definition>
        <argsstring>(T1 const &amp;a, T2 const &amp;b)</argsstring>
        <name>pow</name>
        <param>
          <type>T1 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="940" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="940" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1ae5f6e1d78c4914a741b9413b937eae65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::r2d</definition>
        <argsstring>()</argsstring>
        <name>r2d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="661" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="661" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a51acf023bf8065ec861e01f4c4cc805f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::relaxed_epsilon</definition>
        <argsstring>(T const &amp;factor)</argsstring>
        <name>relaxed_epsilon</name>
        <param>
          <type>T const &amp;</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="566" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="566" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a9b824bef05a5530d6e87382393e8eedf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::round_angle</definition>
        <argsstring>(T const &amp;x)</argsstring>
        <name>round_angle</name>
        <param>
          <type>T const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Round off a given angle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="878" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="878" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a9ee0eff484a0f70bc80f0c1a26aef4ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Result</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Result</type>
        <definition>Result boost::geometry::math::rounding_cast</definition>
        <argsstring>(T const &amp;v)</argsstring>
        <name>rounding_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Short utility to cast a value possibly rounding it to the nearest integral value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the source T is NOT an integral type and Result is an integral type the value is rounded towards the closest integral value. Otherwise it&apos;s casted without rounding. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="818" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="818" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a39f35b486fe993efe243015b3bfcb12b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::scaled_epsilon</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>scaled_epsilon</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="572" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="572" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a9bffcb7377116b49b7e4108a7f1407d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::scaled_epsilon</definition>
        <argsstring>(T const &amp;value, T const &amp;eps)</argsstring>
        <name>scaled_epsilon</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="578" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="578" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a90d4a8c844454f90a014a6a506f30b2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int boost::geometry::math::sign</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>sign</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Short utility to calculate the sign of a number: -1 (negative), 0 (zero), 1 (positive) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="803" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="803" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a302d68f66f89d68fe9a10bd6b2ddcd58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::math::sin_cos_degrees</definition>
        <argsstring>(T const &amp;x, T &amp;sinx, T &amp;cosx)</argsstring>
        <name>sin_cos_degrees</name>
        <param>
          <type>T const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>sinx</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>cosx</declname>
        </param>
        <briefdescription>
<para>Evaluate the sine and cosine function with the argument in degrees. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The results obey exactly the elementary properties of the trigonometric functions, e.g., sin 9<deg/> = cos 81<deg/> = <minus/> sin 123456789<deg/>. If x = <minus/>0, then <emphasis>sinx</emphasis> = <minus/>0; this is the only case where <minus/>0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="842" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="842" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a1fcb14beeef88ba80fc81536339b8a9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::math::smaller</definition>
        <argsstring>(T1 const &amp;a, T2 const &amp;b)</argsstring>
        <name>smaller</name>
        <param>
          <type>T1 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="617" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="617" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a1e8c7d337146a145aa98eac9cf49a65d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::math::smaller_or_equals</definition>
        <argsstring>(T1 const &amp;a, T2 const &amp;b)</argsstring>
        <name>smaller_or_equals</name>
        <param>
          <type>T1 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="635" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="635" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a9831a2a89659dff736070d80ed20738f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::sqr</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>sqr</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Short utility to return the square. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to calculate the square from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The squared value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="748" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="748" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a7f2abcc0afdf9ec19890bd6debdf8e87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>detail::square_root&lt; T &gt;::return_type</type>
        <definition>detail::square_root&lt;T&gt;::return_type boost::geometry::math::sqrt</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>sqrt</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Short utility to return the square root. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to calculate the square root from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The square root value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="761" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="761" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1math_1a4e378b7874bd19dcb42710747a24d675" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::geometry::math::two_pi</definition>
        <argsstring>()</argsstring>
        <name>two_pi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="560" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" bodystart="560" bodyend="560"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/math.hpp" line="44" column="1"/>
  </compounddef>
</doxygen>
