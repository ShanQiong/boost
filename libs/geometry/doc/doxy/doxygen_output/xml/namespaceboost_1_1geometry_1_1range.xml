<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceboost_1_1geometry_1_1range" kind="namespace" language="C++">
    <compoundname>boost::geometry::range</compoundname>
    <innerclass refid="classboost_1_1geometry_1_1range_1_1back__insert__iterator" prot="public">boost::geometry::range::back_insert_iterator</innerclass>
    <innernamespace refid="namespaceboost_1_1geometry_1_1range_1_1detail">boost::geometry::range::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a7c79fd25d811890d8dd588c04b87ce95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessRange</type>
          </param>
        </templateparamlist>
        <type>boost::range_reference&lt; RandomAccessRange &gt;::type</type>
        <definition>boost::range_reference&lt;RandomAccessRange&gt;::type boost::geometry::range::at</definition>
        <argsstring>(RandomAccessRange &amp;&amp;rng, typename boost::range_size&lt; RandomAccessRange &gt;::type i)</argsstring>
        <name>at</name>
        <param>
          <type>RandomAccessRange &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_size&lt; RandomAccessRange &gt;::type</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return an element of a RandomAccessRange. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="107" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a635685665a1fc1105ef7c0c907f99b49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BidirectionalRange</type>
          </param>
        </templateparamlist>
        <type>boost::range_reference&lt; BidirectionalRange &gt;::type</type>
        <definition>boost::range_reference&lt;BidirectionalRange&gt;::type boost::geometry::range::back</definition>
        <argsstring>(BidirectionalRange &amp;&amp;rng)</argsstring>
        <name>back</name>
        <param>
          <type>BidirectionalRange &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return the back element of a BidirectionalRange. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="131" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="131" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a1e6b151e65be317d5cfaadfd26f5135e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1geometry_1_1range_1_1back__insert__iterator" kindref="compound">back_insert_iterator</ref>&lt; Range &gt;</type>
        <definition>back_insert_iterator&lt;Range&gt; boost::geometry::range::back_inserter</definition>
        <argsstring>(Range &amp;rng)</argsstring>
        <name>back_inserter</name>
        <param>
          <type>Range &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="428" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1aa6f548513865ce451b8146f91c0e8e61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>detail::enable_if_mutable_t&lt; Range, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::range::clear</definition>
        <argsstring>(Range &amp;&amp;rng)</argsstring>
        <name>clear</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently clear a mutable range. It uses traits::clear&lt;&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="150" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="150" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a52e12a6ece70b16fa61c732f994ccb5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>detail::enable_if_mutable_t&lt; Range, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::range::emplace_back</definition>
        <argsstring>(Range &amp;&amp;rng, Args &amp;&amp;... args)</argsstring>
        <name>emplace_back</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently insert a new element at the end of a mutable range. It uses boost::geometry::traits::emplace_back&lt;&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="207" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="207" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1ac144d7d17a30f3a7147061a620e6cda5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>detail::enable_if_mutable_t&lt; Range, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>boost::range_iterator&lt; Range &gt;::type</type>
        <definition>boost::range_iterator&lt;Range&gt;::type boost::geometry::range::erase</definition>
        <argsstring>(Range &amp;&amp;rng, typename boost::range_iterator&lt; Range &gt;::type it)</argsstring>
        <name>erase</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_iterator&lt; Range &gt;::type</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently remove an element from a mutable range. It uses std::move() and <ref refid="namespaceboost_1_1geometry_1_1range_1ad4bd267926d2cb934ada838613126a80" kindref="member">resize()</ref>. Version taking mutable iterators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="261" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="261" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a477f1e3eb5b345494b38840cbc46dcce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>detail::enable_if_mutable_t&lt; Range, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>boost::range_iterator&lt; Range &gt;::type</type>
        <definition>boost::range_iterator&lt;Range&gt;::type boost::geometry::range::erase</definition>
        <argsstring>(Range &amp;&amp;rng, typename boost::range_iterator&lt; std::remove_reference_t&lt; Range &gt; const &gt;::type cit)</argsstring>
        <name>erase</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_iterator&lt; std::remove_reference_t&lt; Range &gt; const &gt;::type</type>
          <declname>cit</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently remove an element from a mutable range. It uses std::move() and <ref refid="namespaceboost_1_1geometry_1_1range_1ad4bd267926d2cb934ada838613126a80" kindref="member">resize()</ref>. Version taking non-mutable iterators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="297" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="297" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a704649ba85d86bf055b571733d95305a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>detail::enable_if_mutable_t&lt; Range, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>boost::range_iterator&lt; Range &gt;::type</type>
        <definition>boost::range_iterator&lt;Range&gt;::type boost::geometry::range::erase</definition>
        <argsstring>(Range &amp;&amp;rng, typename boost::range_iterator&lt; Range &gt;::type first, typename boost::range_iterator&lt; Range &gt;::type last)</argsstring>
        <name>erase</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_iterator&lt; Range &gt;::type</type>
          <declname>first</declname>
        </param>
        <param>
          <type>typename boost::range_iterator&lt; Range &gt;::type</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently remove a range of elements from a mutable range. It uses std::move() and <ref refid="namespaceboost_1_1geometry_1_1range_1ad4bd267926d2cb934ada838613126a80" kindref="member">resize()</ref>. Version taking mutable iterators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="320" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="320" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a1e19d2baa6d4bbd9370a3bc69e2bc1d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>detail::enable_if_mutable_t&lt; Range, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>boost::range_iterator&lt; Range &gt;::type</type>
        <definition>boost::range_iterator&lt;Range&gt;::type boost::geometry::range::erase</definition>
        <argsstring>(Range &amp;&amp;rng, typename boost::range_iterator&lt; std::remove_reference_t&lt; Range &gt; const &gt;::type cfirst, typename boost::range_iterator&lt; std::remove_reference_t&lt; Range &gt; const &gt;::type clast)</argsstring>
        <name>erase</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_iterator&lt; std::remove_reference_t&lt; Range &gt; const &gt;::type</type>
          <declname>cfirst</declname>
        </param>
        <param>
          <type>typename boost::range_iterator&lt; std::remove_reference_t&lt; Range &gt; const &gt;::type</type>
          <declname>clast</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently remove a range of elements from a mutable range. It uses std::move() and <ref refid="namespaceboost_1_1geometry_1_1range_1ad4bd267926d2cb934ada838613126a80" kindref="member">resize()</ref>. Version taking non-mutable iterators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="362" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="362" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a394d98dd887b1fdbd2f3315b9f36ad91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>boost::range_reference&lt; Range &gt;::type</type>
        <definition>boost::range_reference&lt;Range&gt;::type boost::geometry::range::front</definition>
        <argsstring>(Range &amp;&amp;rng)</argsstring>
        <name>front</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return the front element of a Range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="119" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1ab8bc1197e82f5121062f295b5d306058" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>detail::enable_if_mutable_t&lt; Range, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::range::pop_back</definition>
        <argsstring>(Range &amp;&amp;rng)</argsstring>
        <name>pop_back</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently remove an element from the back of a mutable range. It uses <ref refid="namespaceboost_1_1geometry_1_1range_1ad4bd267926d2cb934ada838613126a80" kindref="member">resize()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="244" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="244" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a2ab9a80cc217f341af5e9e6c10b70e77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessRange</type>
          </param>
        </templateparamlist>
        <type>boost::range_iterator&lt; RandomAccessRange &gt;::type</type>
        <definition>boost::range_iterator&lt;RandomAccessRange&gt;::type boost::geometry::range::pos</definition>
        <argsstring>(RandomAccessRange &amp;&amp;rng, typename boost::range_size&lt; RandomAccessRange &gt;::type i)</argsstring>
        <name>pos</name>
        <param>
          <type>RandomAccessRange &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_size&lt; RandomAccessRange &gt;::type</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return an iterator of a RandomAccessRange. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="92" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a603135830b2636bbd41aabe0f57d9ade" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>detail::enable_if_mutable_t&lt; Range, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::range::push_back</definition>
        <argsstring>(Range &amp;&amp;rng, typename boost::range_value&lt; Range &gt;::type const &amp;value)</argsstring>
        <name>push_back</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_value&lt; Range &gt;::type const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently insert a new element at the end of a mutable range. It uses boost::geometry::traits::push_back&lt;&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="168" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="168" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1af233e2c7df2fefb4571170da508b5f63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>detail::enable_if_mutable_t&lt; Range, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::range::push_back</definition>
        <argsstring>(Range &amp;&amp;rng, typename boost::range_value&lt; Range &gt;::type &amp;&amp;value)</argsstring>
        <name>push_back</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_value&lt; Range &gt;::type &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently insert a new element at the end of a mutable range. It uses boost::geometry::traits::push_back&lt;&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="187" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="187" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1ad4bd267926d2cb934ada838613126a80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>detail::enable_if_mutable_t&lt; Range, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::range::resize</definition>
        <argsstring>(Range &amp;&amp;rng, typename boost::range_size&lt; Range &gt;::type new_size)</argsstring>
        <name>resize</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_size&lt; Range &gt;::type</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently resize a mutable range. It uses boost::geometry::traits::resize&lt;&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="225" column="1" bodyfile="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" bodystart="225" bodyend="232"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/hsb/CProj/Learning/boost/boost_1_79_0/boost/geometry/util/range.hpp" line="38" column="1"/>
  </compounddef>
</doxygen>
